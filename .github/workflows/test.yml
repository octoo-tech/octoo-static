name: Test Suite

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit

          - coverage

  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == 'coverage' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests with coverage
        run: npm run test:unit -- --coverage --run --reporter=verbose
        
      - name: Generate coverage badge
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const pct = coverage.total.lines.pct;
              const color = pct >= 80 ? 'brightgreen' : pct >= 60 ? 'yellow' : 'red';
              console.log(`Coverage: ${pct}% (${color})`);
            } catch (error) {
              console.log('Coverage file not found');
            }
        
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/
          retention-days: 30



  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
        
      - name: Run Lighthouse CI
        run: |
          npm run preview &
          sleep 5
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build

      - name: Run accessibility tests
        run: |
          echo "Accessibility tests would be implemented here"
          echo "Consider using tools like axe-core, lighthouse, or pa11y"

  test-summary:
    name: Test Summary Report
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Generate test summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let summary = '# üß™ Test Suite Summary\n\n';
            
            // Check unit test coverage
            try {
              const coveragePath = path.join('coverage-report', 'coverage-summary.json');
              if (fs.existsSync(coveragePath)) {
                const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
                const total = coverage.total;
                
                summary += '## üìä Unit Test Coverage\n\n';
                summary += '| Metric | Percentage | Covered/Total |\n';
                summary += '|--------|------------|---------------|\n';
                summary += `| Lines | ${total.lines.pct}% | ${total.lines.covered}/${total.lines.total} |\n`;
                summary += `| Functions | ${total.functions.pct}% | ${total.functions.covered}/${total.functions.total} |\n`;
                summary += `| Branches | ${total.branches.pct}% | ${total.branches.covered}/${total.branches.total} |\n`;
                summary += `| Statements | ${total.statements.pct}% | ${total.statements.covered}/${total.statements.total} |\n\n`;
                
                const status = total.lines.pct >= 80 ? '‚úÖ Excellent' : total.lines.pct >= 60 ? '‚ö†Ô∏è Good' : '‚ùå Needs Improvement';
                summary += `**Overall Status**: ${status} (${total.lines.pct}% line coverage)\n\n`;
              }
            } catch (error) {
              summary += '## ‚ùå Unit Test Coverage\nCoverage report not found\n\n';
            }
            

            
            summary += '## üéØ Test Execution Details\n\n';
            summary += `- **Workflow**: ${context.workflow}\n`;
            summary += `- **Run ID**: ${context.runId}\n`;
            summary += `- **Triggered by**: ${context.eventName}\n`;
            summary += `- **Branch**: ${context.ref}\n`;
            summary += `- **Commit**: ${context.sha.substring(0, 7)}\n`;
            
            console.log(summary);
            
            // Save summary to file
            fs.writeFileSync('test-summary.md', summary);
            
      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test-summary.md
          retention-days: 30
