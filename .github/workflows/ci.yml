name: Continuous Integration

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ develop ]

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        continue-on-error: true
        
      - name: Run Prettier check
        run: npm run format
        continue-on-error: true

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests with coverage
        run: npm run test:unit -- --coverage --run
        
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7
          
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = coverage.total;
              
              const comment = `## 📊 Test Coverage Report
              
              | Metric | Percentage | Covered/Total |
              |--------|------------|---------------|
              | Lines | ${total.lines.pct}% | ${total.lines.covered}/${total.lines.total} |
              | Functions | ${total.functions.pct}% | ${total.functions.covered}/${total.functions.total} |
              | Branches | ${total.branches.pct}% | ${total.branches.covered}/${total.branches.total} |
              | Statements | ${total.statements.pct}% | ${total.statements.covered}/${total.statements.total} |
              
              ${total.lines.pct >= 80 ? '✅' : '⚠️'} Overall coverage: **${total.lines.pct}%**
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Coverage file not found or invalid');
            }

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
        
      - name: Build application
        run: npm run build
        
      - name: Run integration tests
        run: npx playwright test --project=${{ matrix.browser }}
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm
          
      - name: Install dependencies
        run: npm ci
        
      - name: Type check
        run: npm run check
        
      - name: Build application
        run: npm run build
        
      - name: Check build size
        run: |
          BUILD_SIZE=$(du -sh build/ | cut -f1)
          echo "Build size: $BUILD_SIZE"
          echo "BUILD_SIZE=$BUILD_SIZE" >> $GITHUB_ENV
          
      - name: Comment build info on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 🏗️ Build Information
            
            ✅ **Build Status**: Successful
            📦 **Build Size**: ${process.env.BUILD_SIZE}
            🔍 **Type Check**: Passed
            
            The application builds successfully and is ready for deployment.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
        
      - name: Run dependency check
        run: npx depcheck
        continue-on-error: true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, build-check]
    if: always()
    steps:
      - name: Test Summary
        uses: actions/github-script@v7
        with:
          script: |
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            const testJobs = jobs.jobs.filter(job => 
              job.name.includes('Unit Tests') || 
              job.name.includes('Integration Tests') || 
              job.name.includes('Build Check')
            );
            
            const passed = testJobs.filter(job => job.conclusion === 'success').length;
            const failed = testJobs.filter(job => job.conclusion === 'failure').length;
            const total = testJobs.length;
            
            console.log(`Test Summary: ${passed}/${total} jobs passed`);
            
            if (failed > 0) {
              core.setFailed(`${failed} test job(s) failed`);
            }
